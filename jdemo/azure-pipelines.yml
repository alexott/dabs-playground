# Grab variables from the specific variable group and
# determine sourceBranchName (avoids SourchBranchName=merge for PR)
variables:
  - group: 'DABs Testing'
  - name: 'branchName'
    ${{ if startsWith(variables['Build.SourceBranch'], 'refs/heads/') }}:
      value: $[ replace(variables['Build.SourceBranch'], 'refs/heads/', '') ]
    ${{ if startsWith(variables['Build.SourceBranch'], 'refs/pull/') }}:
      value: $[ replace(variables['System.PullRequest.SourceBranch'], 'refs/heads/', '') ]

trigger:
  batch: true
  branches:
    include:
    - '*'
  paths:
    exclude:
      - README.md
      - LICENSE
      - images
      - terraform
      - .github
      - .vscode
      - TODOs.org

stages:
- stage: onPush
  condition: |
    and(
      ne(variables['Build.SourceBranch'], 'refs/heads/releases'),
      not(startsWith(variables['Build.SourceBranch'], 'refs/tags/v'))
    )
  jobs:
  - job: onPushJob
    pool:
      vmImage: 'ubuntu-latest'

    steps:
    - task: UsePythonVersion@0
      displayName: 'Use Python 3.11'
      inputs:
        versionSpec: 3.11

    - checkout: self
      displayName: 'Checkout & Build.Reason: $(Build.Reason) & Build.SourceBranchName: $(Build.SourceBranchName)'

    - script: |
        eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
        brew tap databricks/tap
        brew install databricks
        databricks -v
      displayName: 'Install Databricks CLI'
      env:
        HOMEBREW_NO_ENV_HINTS: 1
        HOMEBREW_NO_INSTALL_CLEANUP: 1

    - script: |
        pip install -U -r requirements-dev.txt
      displayName: 'Install dependencies'

    - script: |
        pytest tests --junit-xml=test-local.xml
      displayName: 'Execute local tests'
      
    - script: |
        eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
        databricks bundle deploy -t staging --var="uniq_id=$(branchName)"
      env:
        DATABRICKS_HOST: $(DATABRICKS_HOST)
        DATABRICKS_TOKEN: $(DATABRICKS_TOKEN)
      displayName: 'Deploy to staging'

    - script: |
        eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
        # We can pass parameters (--jar-params, --python-params, --notebook-params) here to point to another data location, etc.
        databricks bundle run jdemo_job -t staging --var="uniq_id=$(branchName)"
      env:
        DATABRICKS_HOST: $(DATABRICKS_HOST)
        DATABRICKS_TOKEN: $(DATABRICKS_TOKEN)
      displayName: 'Run in staging'

    - script: |
        eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
        echo "Optionally destroy the bundle"
        # databricks bundle destroy --auto-approve -t staging --var="uniq_id=$(branchName)"
      env:
        DATABRICKS_HOST: $(DATABRICKS_HOST)
        DATABRICKS_TOKEN: $(DATABRICKS_TOKEN)
      displayName: 'Destroy in staging on succcess'

    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/test-*.xml' 
        failTaskOnFailedTests: true

# Separate pipeline for releases branch
# Right now it's similar to the onPush stage, but runs only local tests and then deploy to the prod.
- stage: onRelease
  condition: |
    eq(variables['Build.SourceBranch'], 'refs/heads/releases')
  jobs:
  - job: onReleaseJob
    pool:
      vmImage: 'ubuntu-latest'

    steps:
    - task: UsePythonVersion@0
      displayName: 'Use Python 3.11'
      inputs:
        versionSpec: 3.11

    - checkout: self
      displayName: 'Checkout & Build.Reason: $(Build.Reason) & Build.SourceBranchName: $(Build.SourceBranchName)'

    - script: |
        eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
        brew tap databricks/tap
        brew install databricks
        databricks -v
      displayName: 'Install Databricks CLI'
      env:
        HOMEBREW_NO_ENV_HINTS: 1
        HOMEBREW_NO_INSTALL_CLEANUP: 1

    - script: |
        pip install -U -r requirements-dev.txt
      displayName: 'Install dependencies'

    - script: |
        pytest tests --junit-xml=test-local.xml
      displayName: 'Execute local tests'
      
    - script: |
        eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
        databricks bundle deploy -t prod
      env:
        DATABRICKS_HOST: $(DATABRICKS_HOST)
        DATABRICKS_TOKEN: $(DATABRICKS_TOKEN)
      displayName: 'Deploy to production'
      
    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/test-*.xml' 
        failTaskOnFailedTests: true
